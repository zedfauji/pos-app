CommunityToolkit PrintHelper Documentation
Introduction
The PrintHelper class is part of the Windows Community Toolkit (formerly UWP Community Toolkit), a collection of open-source helpers, extensions, and custom controls designed to simplify common developer tasks in building Windows applications using WinUI or UWP. Specifically, PrintHelper is a utility class in the CommunityToolkit.WinUI.Helpers namespace that streamlines the process of printing documents by allowing developers to render FrameworkElements (XAML UI elements) on individual pages. It abstracts much of the complexity involved in using the native Windows printing APIs, such as PrintManager and PrintDocument, making it easier to integrate printing functionality into applications.
This class is particularly useful for scenarios like printing receipts, reports, dashboards, or lists in WinUI 3 desktop apps or UWP apps. It handles the print dialog, preview generation, pagination, and event handling for print outcomes (success, failure, cancellation).
Key Features:

Renders one or more FrameworkElements as print pages.
Supports customization of print options, such as orientation, margins, and displayed settings.
Integrates with MVVM patterns for clean architecture.
Events for handling print lifecycle (e.g., preview creation, print success/failure).

Assembly and NuGet Package:

Assembly: CommunityToolkit.WinUI.Helpers.dll
NuGet Package: CommunityToolkit.WinUI.Helpers (latest as of 2025: v8.2.x)
Dependencies: Requires Windows App SDK (for WinUI 3) or UWP runtime.

Namespace Overview:
The CommunityToolkit.WinUI.Helpers namespace contains various utility classes beyond printing, such as:

ColorHelper: Static methods for color manipulation (e.g., useful for customizing print visuals).
CompositionTargetHelper: Helpers for rendering and composition, which can aid in preparing elements for printing.
StreamHelper and StorageFileHelper: For handling streams and files, potentially useful for saving print outputs or loading content.
PrintHelperOptions: A companion class to PrintHelper for configuring print task options.

Printing-related classes are tightly integrated: PrintHelper uses PrintHelperOptions to customize the print job, such as setting orientation or hiding specific UI options in the print dialog.
Version Notes:

Documented primarily for v7.0 of the toolkit (as per Microsoft Learn API reference).
In v8.0 and later (up to v8.2 released in April 2025), the toolkit underwent package restructuring with unified namespaces under CommunityToolkit.WinUI.*. There are no explicit updates, additions, or deprecations mentioned for PrintHelper in release notes for v8.0 or v8.2. However, user discussions indicate it may not be readily visible in newer samples or galleries, suggesting possible migration issues or reduced emphasis, but the class remains in the Helpers package. Always check the latest NuGet package and GitHub changelog for confirmation.

Remarks:

Based on Microsoft's universal samples for printing (e.g., https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/Printing/cs/PrintHelper.cs).
Requires an invisible Panel in the visual tree to render print content off-screen.
Not suitable for direct printing of web content or non-FrameworkElements; convert to XAML elements first.
For advanced scenarios like POS receipt printers, consider combining with third-party libraries (e.g., ESC/POS).

Class Definition
csharppublic class PrintHelper : IDisposable

Inheritance: Object â†’ PrintHelper
Implements: IDisposable
Namespace: CommunityToolkit.WinUI.Helpers

Constructors
PrintHelper(Panel panel, PrintHelperOptions options = null, DispatcherQueue dispatcherQueue = null)

Parameters:

panel (Microsoft.UI.Xaml.Controls.Panel, required): An invisible Panel in the visual tree used as a container for rendering print pages off-screen. This must be part of the UI to allow measurement and arrangement.
options (CommunityToolkit.WinUI.Helpers.PrintHelperOptions, optional): Configuration options for the print task, such as orientation or displayed settings in the print dialog. Defaults to null (uses standard options).
dispatcherQueue (Microsoft.UI.Dispatching.DispatcherQueue, optional): The DispatcherQueue for UI thread updates during printing. Defaults to null (uses the current queue).


Description: Initializes a new instance of PrintHelper, preparing it for adding printable elements and showing the print UI. The panel is crucial for off-screen rendering to avoid visual artifacts.
Example:
csharpvar printHelper = new PrintHelper(PrintingContainer, new PrintHelperOptions(), DispatcherQueue.GetForCurrentThread());


Properties





























Property NameTypeAccessDescriptionApplicationContentMarginLeftdoubleGet/SetSpecifies the percentage of the app's margin width (left side) applied to print pages for alignment with the app's layout. Default: 0.03 (3%).ApplicationContentMarginTopdoubleGet/SetSpecifies the percentage of the app's margin height (top side) applied to print pages. Default: 0.03 (3%).DispatcherQueueMicrosoft.UI.Dispatching.DispatcherQueueGet/SetThe DispatcherQueue used for dispatching UI updates during the print process. Useful in multi-threaded scenarios.

Remarks: Margins ensure printed content matches the app's visual padding. Adjust for custom paper sizes or layouts.

Methods
void AddFrameworkElementToPrint(FrameworkElement element)

Parameters: element (Microsoft.UI.Xaml.FrameworkElement): The UI element to add as a print page.
Returns: void
Description: Adds a FrameworkElement to the internal list of items to print, where each element renders on its own page.

void RemoveFrameworkElementToPrint(FrameworkElement element)

Parameters: element (Microsoft.UI.Xaml.FrameworkElement): The element to remove.
Returns: void
Description: Removes a previously added element from the print list.

void ClearListOfPrintableFrameworkElements()

Parameters: None
Returns: void
Description: Clears all added printable elements, resetting the print content.

async Task ShowPrintUIAsync(string title, bool showPrintDialog = true)

Parameters:

title (string): The title displayed in the print dialog.
showPrintDialog (bool, optional): Whether to display the system print UI. Default: true.


Returns: Task (asynchronous operation)
Description: Initiates the print task, showing the print dialog (if enabled) with preview pages generated from added elements.

async Task ShowPrintUIAsync(string title, PrintHelperOptions options, bool showPrintDialog = true)

Overload Parameters:

title (string): Print task title.
options (PrintHelperOptions): Custom options to override defaults.
showPrintDialog (bool): Show dialog flag.


Returns: Task
Description: Similar to the above but applies custom options during the print task.

void Dispose()

Parameters: None
Returns: void
Description: Releases resources associated with the PrintHelper, such as event handlers and internal print manager references. Always call after printing to avoid memory leaks.

Events



































Event NameDelegate TypeDescriptionEvent ArgsOnPreviewPagesCreatedEventHandlerRaised after preview pages are generated, allowing post-processing (e.g., scaling or adjustments).Not specified (use sender for PrintHelper reference).OnPrintCanceledEventHandlerTriggered when the user cancels the print job via the dialog.Not specified.OnPrintFailedEventHandlerFired if the print job fails (e.g., printer error).Not specified.OnPrintSucceededEventHandlerOccurs on successful completion of the print job.Not specified.

Remarks: Attach handlers to provide user feedback, e.g., toasts for success/failure. Events are crucial for handling asynchronous print outcomes.

Companion Class: PrintHelperOptions
PrintHelperOptions configures the print task and is passed to the PrintHelper constructor or ShowPrintUIAsync.

Properties:

Orientation (PrintOrientation): Default, Portrait, or Landscape.
DisplayedOptions (IList<string>): List of options shown in the print dialog (e.g., "copies", "orientation"). Use StandardPrintTaskOptions keys.</string>
Other native options like Bordering, HolePunch, etc., inherited from PrintTaskOptions.


Description: Extends base print options to customize the UI and behavior, such as hiding advanced settings or forcing landscape mode.

Usage Examples
Basic Single-Page Printing
Print a simple Grid as a receipt.
csharpprivate async void PrintButton_Click(object sender, RoutedEventArgs e)
{
    var options = new PrintHelperOptions { Orientation = PrintOrientation.Portrait };
    using (var printHelper = new PrintHelper(PrintingContainer, options, DispatcherQueue.GetForCurrentThread()))
    {
        printHelper.AddFrameworkElementToPrint(PrintableGrid); // Your receipt UI
        printHelper.OnPrintSucceeded += () => { /* Show success message */ };
        printHelper.OnPrintFailed += () => { /* Show error */ };
        await printHelper.ShowPrintUIAsync("Print Receipt");
    }
}
Advanced MVVM Multi-Page Printing
Use a service class for MVVM separation, printing a list of items across pages with headers, footers, and page numbers.

Enum for PageNumbering:
csharppublic enum PageNumbering { None, BottomLeft, BottomMidle, BottomRight }

PrintPage UserControl: A custom control to compose content with header/footer.
xml<UserControl ...>
    <Grid>
        <Grid.RowDefinitions><!-- Rows for header, content, footer --></Grid.RowDefinitions>
        <ContentControl Grid.Row="0" Content="{x:Bind Header}" />
        <ContentControl Grid.Row="1" Content="{x:Bind Content}" />
        <ContentControl Grid.Row="2" Content="{x:Bind Footer}" />
        <TextBlock Grid.Row="2" Text="{x:Bind PageNumber}" /> <!-- Position based on enum -->
    </Grid>
</UserControl>

PrintService (as above in function response).
Printing a Collection:
csharpvar service = new PrintService();
service.Header = new TextBlock { Text = "Receipt Header" };
service.Footer = new TextBlock { Text = "Footer Text" };
service.PageNumbering = PageNumbering.BottomRight;
foreach (var item in Items)
{
    var content = new ContentControl { ContentTemplate = ItemTemplate, DataContext = item };
    service.AddPrintContent(content);
}
service.Print();


Printing Complex Reports or Dashboards
For dashboards with charts/images, create a print-specific DataTemplate with vertical layout.

Tips: Use white backgrounds for print; avoid scrollable controls. Measure/arrange elements in the invisible panel to fit page size.

Handling Large Data with Page Breaks
PrintHelper doesn't auto-break pages, so manually split content:

Calculate element height vs. page size.
Use multiple AddFrameworkElementToPrint calls for overflow.
Workaround Example:
If data overflows, create subsets per page using layout calculations in OnPreviewPagesCreated.

Remarks and Tips

Invisible Panel Requirement: Must be in the visual tree (Opacity=0) for rendering.
Performance: For large prints, dispose promptly and handle events to avoid UI freezes.
Customization: Use OnPreviewPagesCreated to scale or modify pages dynamically.
Limitations: No built-in support for page breaks in lists; use manual pagination.
Integration with Other Tools: Combine with CommunityToolkit MVVM for data binding in print content.
Troubleshooting: Ensure app has printing capabilities enabled in manifest. Test on physical printers for margin accuracy.
Updates in Recent Versions: No major changes reported in v8.x; remains stable but check GitHub for issues.

This documentation is compiled from official sources and examples, suitable for training models on PrintHelper usage. For the latest, refer to Microsoft Learn or GitHub.