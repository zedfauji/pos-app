WinUI 3 Desktop App Printing APIs: PrintManager Interop and Window Handle Usage
Introduction
WinUI 3, part of the Windows App SDK, provides a modern UI framework for building Windows desktop applications. Printing functionality in WinUI 3 desktop apps (non-UWP) requires special considerations compared to Universal Windows Platform (UWP) apps, primarily due to the lack of a direct "current view" context. Instead, desktop apps must use interop mechanisms to associate printing operations with specific windows using window handles (HWND).
The core printing API revolves around the PrintManager class from the Windows.Graphics.Printing namespace, which orchestrates the print flow. However, in desktop scenarios, accessing PrintManager involves the IPrintManagerInterop interface, which allows retrieval of a PrintManager instance tied to a specific window handle. This interop is essential for multi-window apps or when the app runs in a Win32 context.
This documentation focuses on PrintManagerInterop and window handle usage, drawing from official Microsoft resources. It covers interfaces, methods, code examples in C# and C++/WinRT, requirements, and best practices for implementing printing in WinUI 3 desktop apps.
Key namespaces:

Microsoft.UI.Xaml.Printing (for interop extensions in WinUI 3)
Windows.Graphics.Printing (core printing classes)
WinRT.Interop (for window handle retrieval in C#)
Microsoft.UI.Xaml.Window (for WinUI 3 windows)

Printing involves:

Retrieving the HWND of the target window.
Using PrintManagerInterop to get a PrintManager instance.
Registering event handlers for print tasks.
Preparing print content via PrintDocument.
Invoking the print UI with interop methods.

Overview of PrintManager in Desktop Apps
The PrintManager class is responsible for managing the printing workflow, including event handling for print requests and displaying the print UI. In UWP apps, it's accessed via PrintManager.GetForCurrentView(). In WinUI 3 desktop apps, this method is not supported, and interop is required.

Key Differences for Desktop Apps:

Use PrintManagerInterop.GetForWindow(HWND) instead of GetForCurrentView().
Register for printing in the window's Loaded event to ensure the HWND is available (not null).
Unregister in the Unloaded or OnNavigatedFrom event.
For showing the print UI, use PrintManagerInterop.ShowPrintUIForWindowAsync(HWND) to target a specific window.
Check PrintManager.IsSupported() before invoking printing to handle devices without print support.



This approach ensures compatibility with multi-window scenarios, where each window may need its own PrintManager instance.
PrintManagerInterop Interface
The IPrintManagerInterop interface (defined in printmanagerinterop.h) enables access to PrintManager methods in apps managing multiple windows. It inherits from IInspectable and is crucial for desktop interop. This interface is part of the Win32 API but projected into WinRT for use in WinUI 3.
Methods

GetForWindow

Description: Retrieves the PrintManager instance associated with the specified window handle.
Parameters:

hWnd: The window handle (HWND) of the target window.
riid: The reference IID (REFIID) for the interface (typically IID_PPV_ARGS for the PrintManager projection).


Return Value: HRESULT (S_OK on success) and an out parameter for the PrintManager instance.
Remarks: Used to get a window-specific PrintManager for registering print events. Essential in desktop apps where no global "current view" exists. Equivalent to GetForCurrentView() but requires explicit HWND.
Requirements:

Minimum supported client: Windows 8 (desktop apps only)
Minimum supported server: Windows Server 2012 (desktop apps only)
Target Platform: Windows
Header: printmanagerinterop.h




ShowPrintUIForWindowAsync

Description: Asynchronously displays the print UI for the specified window.
Parameters:

appWindow or hWnd: The HWND of the window for which to show the print UI.
riid: The REFIID for the async operation.
asyncOperation: Out parameter for the IAsyncOperation<bool> that reports completion.


Return Value: HRESULT (S_OK on success); the async operation returns true if the UI was shown successfully.
Remarks: Equivalent to PrintManager.ShowPrintUIAsync() but targets a specific window in multi-window apps. Use this to invoke the system print dialog with preview. Handle exceptions for cases where printing fails or is unsupported.
Requirements: Same as above (Windows 8+, desktop apps only).



Usage Notes

PrintManagerInterop is a static interop class in C# projections but requires activation factories in C++/WinRT.
Always pair with HWND retrieval to avoid null handles.
For error handling, check HRESULT values and use try-catch for async operations.

Retrieving Window Handles (HWND) in WinUI 3
Window handles are identifiers for Win32 windows and are required for interop with PrintManagerInterop. WinUI 3 provides several ways to retrieve HWND, depending on the language and context.
Methods

Using WinRT.Interop.WindowNative.GetWindowHandle (C#)

Description: Retrieves HWND from a Microsoft.UI.Xaml.Window instance.
Example:
csharpusing WinRT.Interop; // Required namespace

// In a method, e.g., button click or Loaded event
var hWnd = WindowNative.GetWindowHandle(this); // 'this' is the Window instance

Use Case: Simple retrieval for the current window.


Using IWindowNative::get_WindowHandle (C++/WinRT)

Description: Queries the IWindowNative interface for HWND.
Example:
cpp#include <microsoft.ui.xaml.window.h> // In pch.h

// In a method, e.g., button click
auto windowNative = this->m_inner.as<::IWindowNative>();
HWND hWnd = nullptr;
windowNative->get_WindowHandle(&hWnd);
if (!hWnd) {
    // Handle error, e.g., OutputDebugStringW(L"Failed to retrieve HWND.");
}

Use Case: For C++ apps, ensures compatibility with WinRT projections.


Using AppWindow and ContentIslandEnvironment

Description: From a UI element, navigate to the AppWindowId via XamlRoot, which indirectly relates to HWND.
Steps:

Access UIElement.XamlRoot.
Get XamlRoot.ContentIslandEnvironment.
Retrieve ContentIslandEnvironment.AppWindowId.


Note: This doesn't directly yield HWND but can be used to identify the hosting window for further interop.


Global App Window Handle

Example (C#):
csharpvar hWnd = WindowNative.GetWindowHandle(App.MainWindow); // For app-level main window




Best Practices

Retrieve HWND after the window is loaded (e.g., in Loaded event) to avoid null values.
In multi-window apps, retrieve per-window HWND to associate printing correctly.
Use with SetWindowPos, GetDpiForWindow, etc., for additional Win32 manipulations if needed.

Usage in Desktop Apps
Registration for Printing
Register PrintManager events using interop. Call in Loaded event.

C# Example:
csharpusing Microsoft.UI.Xaml.Printing; // For PrintManagerInterop
using Windows.Graphics.Printing; // For PrintManager
using WinRT.Interop; // For WindowNative

private PrintManager printManager;
private PrintDocument printDocument;
private IPrintDocumentSource printDocumentSource;

private void RegisterForPrinting()
{
    var hWnd = WindowNative.GetWindowHandle(this); // Or App.MainWindow
    printManager = PrintManagerInterop.GetForWindow(hWnd);
    printManager.PrintTaskRequested += PrintTask_Requested;

    printDocument = new PrintDocument();
    printDocumentSource = printDocument.DocumentSource;
    printDocument.Paginate += PrintDocument_Paginate;
    printDocument.GetPreviewPage += PrintDocument_GetPreviewPage;
    printDocument.AddPages += PrintDocument_AddPages;
}

C++/WinRT Example (Using Activation Factory):
cpp#include <winrt/Windows.Graphics.Printing.h>
#include <winrt/Windows.Foundation.h>

HWND my_hwnd = /* Retrieve as above */;
auto af = winrt::get_activation_factory<winrt::Windows::Graphics::Printing::PrintManager, IPrintManagerInterop>();
winrt::Windows::Graphics::Printing::PrintManager print_manager{ nullptr };
winrt::check_hresult(af->GetForWindow(my_hwnd, winrt::guid_of<winrt::Windows::Graphics::Printing::IPrintManager>(), winrt::put_abi(print_manager)));

// Register events
print_manager.PrintTaskRequested([](auto&&, auto&&) { /* Handler */ });


Unregistration
Unregister to avoid leaks, typically in Unloaded.

C# Example:
csharpprivate void UnregisterForPrinting()
{
    if (printDocument == null) return;

    printDocument.Paginate -= PrintDocument_Paginate;
    printDocument.GetPreviewPage -= PrintDocument_GetPreviewPage;
    printDocument.AddPages -= PrintDocument_AddPages;

    var hWnd = WindowNative.GetWindowHandle(this);
    printManager = PrintManagerInterop.GetForWindow(hWnd);
    printManager.PrintTaskRequested -= PrintTask_Requested;
}


Showing the Print UI
Invoke the print dialog asynchronously.

C# Example:
csharpprivate async void InvokePrintingButton_Click(object sender, RoutedEventArgs e)
{
    if (PrintManager.IsSupported())
    {
        try
        {
            var hWnd = WindowNative.GetWindowHandle(this);
            await PrintManagerInterop.ShowPrintUIForWindowAsync(hWnd);
        }
        catch
        {
            // Handle error with ContentDialog
        }
    }
    else
    {
        // Show unsupported dialog
    }
}

C++/WinRT Example:
cppauto af = winrt::get_activation_factory<winrt::Windows::Graphics::Printing::PrintManager, IPrintManagerInterop>();
winrt::Windows::Foundation::IAsyncOperation<bool> print_manager_show{ nullptr };
winrt::check_hresult(af->ShowPrintUIForWindowAsync(my_hwnd, winrt::guid_of<winrt::Windows::Foundation::IAsyncOperation<bool>>(), winrt::put_abi(print_manager_show)));
co_await print_manager_show;


Handling Multiple Windows
In apps with multiple windows:

Retrieve HWND for each window separately (e.g., via IWindowNative per instance).
Create separate PrintManager instances per window using GetForWindow.
Ensure event handlers are window-specific to avoid conflicts.
Example: In a secondary window class, use this->m_inner.as<::IWindowNative>() to get its HWND.

Event Handlers and Print Flow

PrintTaskRequested: Create a PrintTask and set its source to PrintDocument.
Paginate: Calculate page count based on options.
GetPreviewPage: Generate preview visuals.
AddPages: Add actual print pages.

Implement these as per general printing docs, but ensure interop for PrintManager.
Requirements and Remarks

Platform: Windows 10+ with Windows App SDK 1.0+ for WinUI 3.
Dependencies: Include Microsoft.Windows.SDK NuGet for interop.
Threading: Methods are agile; use in UI thread.
Limitations: Not all UWP printing features are supported in desktop; check API compatibility.
Error Handling: Use HRESULT checks in C++; try-catch in C# for async ops.
Performance: For large documents, handle pagination efficiently.
See Also: PrintDocument, PrintTaskOptions for customization.

WinUI 3 Desktop App Printing APIs: PrintManager Interop, Window Handle Usage, PrintDocument, and PrintTaskOptions
Introduction
WinUI 3, integrated into the Windows App SDK, offers a robust framework for developing Windows desktop applications with modern UI capabilities. Printing in WinUI 3 desktop apps (outside the UWP sandbox) requires interop mechanisms, particularly with PrintManagerInterop and window handles (HWND), to manage print workflows across multiple windows. Additionally, the PrintDocument class facilitates the generation and pagination of print content, while PrintTaskOptions allows customization of the print job and preview UI. This documentation expands on the previous section by including detailed information on PrintDocument and PrintTaskOptions, alongside PrintManagerInterop and window handle usage.
Key namespaces:

Microsoft.UI.Xaml.Printing (WinUI 3 extensions)
Windows.Graphics.Printing (core printing classes)
WinRT.Interop (C# window handle retrieval)
Microsoft.UI.Xaml.Window (WinUI 3 windows)

The printing process involves retrieving the HWND, initializing PrintManager via interop, preparing content with PrintDocument, and customizing options with PrintTaskOptions before invoking the print UI.
Overview of PrintManager in Desktop Apps
The PrintManager class orchestrates the printing workflow, requiring interop in desktop apps via PrintManagerInterop.GetForWindow(HWND) instead of GetForCurrentView(). This section remains consistent with prior documentation, focusing on multi-window compatibility and event registration.
PrintManagerInterop Interface
Methods

GetForWindow

Retrieves PrintManager for a specific HWND.
Parameters: hWnd (HWND), riid (REFIID).
Return Value: HRESULT with PrintManager instance.
Remarks: Essential for desktop apps; use post-window load.


ShowPrintUIForWindowAsync

Displays print UI asynchronously for a given HWND.
Parameters: hWnd, riid, asyncOperation (IAsyncOperation<bool>).</bool>
Return Value: HRESULT; async result indicates success.
Remarks: Targets specific windows in multi-window apps.



Usage Notes

Use with HWND retrieval (e.g., WindowNative.GetWindowHandle).
Register/unregister events per window lifecycle.

Retrieving Window Handles (HWND) in WinUI 3
Methods

Using WinRT.Interop.WindowNative.GetWindowHandle (C#)

Example: var hWnd = WindowNative.GetWindowHandle(this);


Using IWindowNative::get_WindowHandle (C++/WinRT)

Example: windowNative->get_WindowHandle(&hWnd);


Using AppWindow and ContentIslandEnvironment

Indirect via XamlRoot.ContentIslandEnvironment.AppWindowId.


Global App Window Handle

Example: var hWnd = WindowNative.GetWindowHandle(App.MainWindow);



Best Practices

Retrieve post-Loaded event.
Handle multi-window scenarios with per-window HWND.

Usage in Desktop Apps
Registration for Printing

C# Example:
csharpprivate void RegisterForPrinting()
{
    var hWnd = WindowNative.GetWindowHandle(this);
    printManager = PrintManagerInterop.GetForWindow(hWnd);
    printManager.PrintTaskRequested += PrintTask_Requested;
    printDocument = new PrintDocument();
    printDocumentSource = printDocument.DocumentSource;
    printDocument.Paginate += PrintDocument_Paginate;
    printDocument.GetPreviewPage += PrintDocument_GetPreviewPage;
    printDocument.AddPages += PrintDocument_AddPages;
}


Unregistration

C# Example:
csharpprivate void UnregisterForPrinting()
{
    if (printDocument == null) return;
    printDocument.Paginate -= PrintDocument_Paginate;
    printDocument.GetPreviewPage -= PrintPreviewPage;
    printDocument.AddPages -= PrintDocument_AddPages;
    var hWnd = WindowNative.GetWindowHandle(this);
    printManager = PrintManagerInterop.GetForWindow(hWnd);
    printManager.PrintTaskRequested -= PrintTask_Requested;
}


Showing the Print UI

C# Example:
csharpprivate async void InvokePrintingButton_Click(object sender, RoutedEventArgs e)
{
    if (PrintManager.IsSupported())
    {
        try
        {
            var hWnd = WindowNative.GetWindowHandle(this);
            await PrintManagerInterop.ShowPrintUIForWindowAsync(hWnd);
        }
        catch
        {
            // Handle error
        }
    }
}


PrintDocument Class
Description
The PrintDocument class, found in Windows.Graphics.Printing, is a reusable object for generating print content. It implements IPrintDocumentSource and manages a "print list" of pages, dynamically populated via events. It serves as the content source for a PrintTask, enabling multi-page documents with preview and print capabilities.
Properties

DocumentPaginator: Gets the IPrintDocumentPaginatorSource interface, which provides access to the paginator for page enumeration.

Type: IPrintDocumentPaginatorSource
Remarks: Used internally by the print system; typically accessed via events.



Methods

AddPage(pageVisual)

Description: Adds a single UI element (e.g., FrameworkElement) as a page to the print list.
Parameters: pageVisual (UIElement)
Return Value: void
Remarks: Called during AddPages event to populate the document.


AddPages(pages)

Description: Adds multiple pages at once.
Parameters: pages (IEnumerable<uielement>)</uielement>
Return Value: void
Remarks: Batch addition for efficiency in multi-page scenarios.


SetPage(pageNumber, pageVisual)

Description: Replaces a specific page in the print list.
Parameters: pageNumber (int), pageVisual (UIElement)
Return Value: void
Remarks: Useful for updating content dynamically.


RemovePage(pageNumber)

Description: Removes a page from the print list.
Parameters: pageNumber (int)
Return Value: void
Remarks: Allows removal of pages before finalizing the job.


GetPageCount()

Description: Returns the total number of pages in the document.
Return Value: int
Remarks: Reflects the count set during the Paginate event.



Events/Handlers

Paginate

Description: Fired to determine the number of pages based on print options (e.g., page range, scaling).
Arguments: PaginateEventArgs
Handler Example:
csharpprivate void PrintDocument_Paginate(object sender, PaginateEventArgs e)
{
    var pageCount = CalculatePageCount(e.PrintTaskOptions);
    e.SetPageCount(pageCount);
    e.Deferral.Complete();
}

Remarks: Use e.PrintTaskOptions to adjust pagination; complete the deferral to signal completion.


GetPreviewPage

Description: Generates preview pages for the system print dialog.
Arguments: GetPreviewPageEventArgs
Handler Example:
csharpprivate void PrintDocument_GetPreviewPage(object sender, GetPreviewPageEventArgs e)
{
    e.PageVisual = GeneratePreviewPage(e.PageNumber);
    e.Deferral.Complete();
}

Remarks: Provides visuals for the preview pane; match page numbers from Paginate.


GetPrintPage

Description: Generates actual print pages.
Arguments: GetPrintPageEventArgs
Handler Example:
csharpprivate void PrintDocument_GetPrintPage(object sender, GetPrintPageEventArgs e)
{
    e.PageVisual = GeneratePrintPage(e.PageNumber);
    e.Deferral.Complete();
}

Remarks: Similar to preview but for final output; ensure content matches preview.



Attributes

[Windows.Foundation.Metadata.ContractVersion(typeof(Microsoft.UI.Xaml.WinUIContract), 65536)]
[Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)]
[Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)]
Inherits from DependencyObject.

Documentation Notes

Use for multi-page documents; events allow dynamic content generation.
Implement a paginator for complex layouts (e.g., variable page sizes).
Handle deferrals to avoid deadlocks in async operations.
Coordinate with PrintTaskOptions for option-aware pagination.

PrintTaskOptions Class
Description
The PrintTaskOptions class, also in Windows.Graphics.Printing, provides access to print job settings and allows customization of the print preview UI. It is associated with a PrintTask and influences how content is rendered and presented to the user.
Properties

DisplayedOptions

Description: Gets a list of IPrintTaskOptionDetails objects representing options shown in the print UI (e.g., page range, copies).
Type: IList<IPrintTaskOptionDetails>
Remarks: Modify to reorder or add/remove options (e.g., DisplayedOptions.InsertAt(0, pageRangeOption);).


MediaSize

Description: Gets/sets the media size (e.g., A4, Letter).
Type: PrintMediaSize
Remarks: Use PrintMediaSizeOptionDetails to customize.


PageRange

Description: Gets/sets the page range for printing.
Type: IPrintPageRange
Remarks: Set via PrintPageRangeOptionDetails.


Orientation

Description: Gets/sets the print orientation (Portrait, Landscape).
Type: PrintOrientation
Remarks: Adjustable via PrintOrientationOptionDetails.


Duplex

Description: Gets/sets duplex printing mode (OneSided, TwoSided).
Type: PrintDuplex
Remarks: Depends on printer capabilities.


Collation

Description: Gets/sets collation mode (Collated, Uncollated).
Type: PrintCollation
Remarks: Controlled via PrintCollationOptionDetails.


ColorMode

Description: Gets/sets color mode (Color, Grayscale).
Type: PrintColorMode
Remarks: Depends on printer support.


Copies

Description: Gets/sets the number of copies.
Type: int
Remarks: Adjustable via PrintCopiesOptionDetails.



Methods

GetPageDescription(pageNumber)

Description: Gets a PrintPageDescription for a specific page.
Parameters: pageNumber (int)
Return Value: PrintPageDescription
Remarks: Provides page dimensions and margins for layout.


GetOptions(key)

Description: Retrieves a specific option by its key (e.g., "winui:pageRange").
Parameters: key (string)
Return Value: IPrintTaskOptionDetails
Remarks: Use to access or modify individual options programmatically.



Events/Handlers

No direct events; options are set during PrintTaskRequested and influence PrintDocument events.
Example Handler in PrintTaskRequested:
csharpprivate void PrintTask_Requested(PrintManager sender, PrintTaskRequestedEventArgs args)
{
    var deferral = args.Request.GetDeferral();
    PrintTask printTask = args.Request.CreatePrintTask("My Print Job", sourceRequested =>
    {
        var options = printTask.Options;
        options.DisplayedOptions.Clear();
        options.DisplayedOptions.Add("winui:copies");
        options.Copies = 2;
        sourceRequested.SetSource(printDocumentSource);
    });
    deferral.Complete();
}


Attributes

[Windows.Foundation.Metadata.ContractVersion(typeof(Microsoft.UI.Xaml.WinUIContract), 65536)]
[Windows.Foundation.Metadata.MarshalingBehavior(Windows.Foundation.Metadata.MarshalingType.Agile)]
[Windows.Foundation.Metadata.Threading(Windows.Foundation.Metadata.ThreadingModel.Both)]
Inherits from DependencyObject.

Documentation Notes

Customize the preview UI by manipulating DisplayedOptions.
Use StandardPrintTaskOptions for predefined keys (e.g., "winui:pageRange", "winui:orientation").
Reflect changes in PrintDocument events (e.g., adjust page count based on PageRange).
Test with various printers to ensure option compatibility.
Users can access full settings via "More settings" in the print dialog.

Requirements and Remarks

Platform: Windows 10+ with Windows App SDK 1.0+.
Dependencies: Microsoft.Windows.SDK NuGet package.
Threading: Agile; use in UI thread.
Limitations: Some UWP features may not apply; verify with PrintManager.IsSupported().
Performance: Optimize PrintDocument pagination for large jobs.
See Also: PrintManager, PrintTask, official Microsoft docs.